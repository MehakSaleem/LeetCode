
----------------------------------------Problem statement-------------------------

Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string "".

A string is palindromic if it reads the same forward and backward.

 

Example 1:

Input: words = ["abc","car","ada","racecar","cool"]
Output: "ada"
Explanation: The first string that is palindromic is "ada".
Note that "racecar" is also palindromic, but it is not the first.
Example 2:

Input: words = ["notapalindrome","racecar"]
Output: "racecar"
Explanation: The first and only string that is palindromic is "racecar".
Example 3:

Input: words = ["def","ghi"]
Output: ""
Explanation: There are no palindromic strings, so the empty string is returned.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 100
words[i] consists only of lowercase English letters.




----------------------------------------Solution---------------------------

public class Solution {
    public string FirstPalindrome(string[] words) {
      int len, numberOfComparison;
      string checkword;
      bool isPalindrome = false;
      
      for(int i = 0; i< words.Length ; i++)
      { 
        isPalindrome = true;
        checkword = words[i];
        len = checkword.Length;//ToCharArray().Count;       
       
        numberOfComparison = len/2; 
        for(int j=0; j < numberOfComparison; j++)
        {
            len = len-1;
            Console.WriteLine(checkword[j] + " compares with "+ checkword[len]);
            if(checkword[j] != checkword[len])
            {
                isPalindrome = false;
                break;
            } 
        }
        if(isPalindrome)
        {
            Console.WriteLine(words[i] + " is a palindrome");
            return words[i];           
        }
        else{
            Console.WriteLine(words[i] + " is not a palindrome");
        }       
      }
      if(!isPalindrome)
        {
            return "";           
        }
        return "";  
    }
}